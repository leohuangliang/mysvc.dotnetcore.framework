<#@ template debug="false" hostspecific="true" language="C#" #><#@ 
output extension=".tt.cs" #><#@ 
import namespace="System.Collections.Generic" #><#@ 
import namespace="System.Xml" #><#@ 
assembly name="System.Xml.dll" #><#@ 
assembly name="EnvDTE" #><# 
EnvDTE.DTE dte = (EnvDTE.DTE) ((IServiceProvider) this.Host)
                        .GetService(typeof(EnvDTE.DTE));     
string xmlFile = System.IO.Path.Combine(dte.ActiveDocument.Path, "Error.xml");
XmlDocument xmlDoc = new XmlDocument();
xmlDoc.Load(xmlFile); 
#>//=======================================================================================
//
// Copyright (C) 2010-2011 Asia-Peak Technologies, Inc. All Rights Reserved.
// 
// All the code, text, graphics, media, design, programs and other works are
// protected by copyright law. Unauthorized reproduction or redistribution of them, 
// or any portion of them, are forbidden.
// 
//=======================================================================================
//---------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------

using System;

namespace MySvc.Framework.Infrastructure.Crosscutting.Exceptions
{    
    public static class ErrorCodes
    {
        public static class NumbericCodes
        {
        <#foreach (XmlNode node in xmlDoc.SelectNodes("//ErrorCode")) { #>
			/// <summary>
            /// <#= node.Attributes["Msg"].Value #>
            /// </summary>
            public const int <#= node.Attributes["Name"].Value #> = unchecked((int)0x<#= node.Attributes["Value"].Value #>);

        <#}#>
}

        public static class StringCodes
        {
        <#foreach (XmlNode node in xmlDoc.SelectNodes("//ErrorCode")) { #>
			/// <summary>
            /// <#= node.Attributes["Msg"].Value #>
            /// </summary>
            public const string <#= node.Attributes["Name"].Value #> = "<#= node.Attributes["Value"].Value #>";

        <#}#>
}

        public static string ToHex(this int value)
        {
            return "0x" + value.ToString("X");
        }
    }
}